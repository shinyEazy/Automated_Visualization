<think>
We are building a UI for text emotion classification.
 The UI should have:
   - A section for users to input a text passage.
   - A button to trigger the emotion prediction.
   - A display area to show the results, including:
        * The input text
        * The predicted emotion (with the highest score)
        * A list of all emotions and their probabilities (scores)
        * An emoji for the predicted emotion

 We are using Tailwind CSS for styling.

 Steps for the JavaScript part:
   1. When the user clicks the predict button (or submits the form), we will get the text from the input.
   2. We will send a POST request to the API endpoint: http://34.87.113.245:8000/api/text-classification
        with the body: { "texts": "the input text" }
   3. The response will be in the format:
        {
          "code": "000",
          "message": "Th√†nh c√¥ng",
          "data": [
            [
              {"label": "anger", "score": ...},
              ... (all 7 emotions)
            ]
          ]
        }
   4. We will then process the response to:
        - Find the emotion with the highest score (the predicted emotion)
        - Display the input text, the predicted emotion, the probabilities for all emotions, and the emoji.

 We'll map the predicted emotion to an emoji. Let's define a mapping:
    anger: üò†
    disgust: ü§¢
    fear: üò®
    joy: üòÑ
    neutral: üòê
    sadness: üò¢
    surprise: üò≤

 We'll also display the probabilities (scores) for each emotion. We can show them in a list or a bar chart? 
 Since the requirement says to show the probabilities of all possible emotions, we can show a table or a list.

 We are also required to show a list of input data and their results. So we can maintain a history of predictions.

 However, note the visualize section: 
    - It says to display a list of input data along with the predicted emotion results. Each data item includes:
          input_text, predicted_emotion, emotion_probabilities, emotion_emoji.

 So we can have:
    - A form at the top for new input.
    - A history section below that shows previous predictions.

 We'll store the history in the client (in-memory array) and display it.

 Implementation:

   We'll have:
     <div class="container mx-auto p-4">
        <h1>Emotion Classification</h1>

        <!-- Input form -->
        <form id="emotion-form" class="mb-8">
          <textarea id="text-input" ...></textarea>
          <button type="submit">Predict Emotion</button>
        </form>

        <!-- Result for the latest prediction (optional, or we can just show in history) -->
        <!-- Instead, we can just add the latest to the top of the history list. -->

        <!-- History list -->
        <div id="history">
          <!-- Each history item will be a card or a row in a table -->
          <!-- We can use a template for the history item -->
        </div>
     </div>

   We'll use JavaScript to:
      - Handle form submission: prevent default, get the text, call the API, then when response comes, add the result to the history array and update the display.

   We'll create a function to add a new prediction result to the history display.

   Structure for a history item:
      - input_text: the text that was input
      - predicted_emotion: the label with the highest score
      - emotion_probabilities: an array of objects {label, score} for all emotions
      - emotion_emoji: the emoji for the predicted emotion

   We can display each history item as:

        <div class="history-item border rounded-lg p-4 mb-4">
          <p><strong>Text:</strong> <span class="input-text">...</span></p>
          <p><strong>Predicted Emotion:</strong> <span class="emotion-label">...</span> <span class="emotion-emoji">üòÑ</span></p>
          <p><strong>Probabilities:</strong></p>
          <ul>
            <li>anger: ...</li>
            ... for each emotion
          </ul>
        </div>

   Alternatively, we can show a table for the probabilities? Or a horizontal bar chart? But the requirement is to show the probabilities of all possible emotions.

   We can also show a bar chart using CSS (like a progress bar for each emotion). But let's keep it simple: a list of emotions and their scores (formatted as percentages).

   We can format the score as: (score * 100).toFixed(2) + '%'

   Steps for the JavaScript:

   let history = []; // array to store history items

   function addToHistory(item) {
      history.unshift(item); // add at the beginning so the latest is on top
      renderHistory();
   }

   function renderHistory() {
      const historyContainer = document.getElementById('history');
      historyContainer.innerHTML = ''; // clear and re-render

      history.forEach(item => {
        const itemElement = document.createElement('div');
        itemElement.className = 'history-item ...';

        // Create the content for this history item
        let probabilitiesHTML = '';
        item.emotion_probabilities.forEach(emotion => {
          probabilitiesHTML += `<li>${emotion.label}: ${(emotion.score * 100).toFixed(2)}%</li>`;
        });

        itemElement.innerHTML = `
          <p><strong>Text:</strong> ${escapeHTML(item.input_text)}</p>
          <p><strong>Predicted Emotion:</strong> ${item.predicted_emotion} ${item.emotion_emoji}</p>
          <p><strong>Probabilities:</strong></p>
          <ul>${probabilitiesHTML}</ul>
        `;

        historyContainer.appendChild(itemElement);
      });
   }

   But note: we have to escape the input text to avoid XSS. We can create a simple escape function.

   Alternatively, we can use textContent for the text, but we are using innerHTML for the whole block. So we can break it down.

   Alternatively, we can create elements and set textContent for the text parts.

   However, for simplicity and to avoid XSS, we can do:

      const textNode = document.createTextNode(item.input_text);
      ... and then append to an element.

   But that would be more code. Let's do a simple escape function:

      function escapeHTML(str) {
        return str.replace(/&/g, "&amp;")
                  .replace(/</g, "&lt;")
                  .replace(/>/g, "&gt;")
                  .replace(/"/g, "&quot;")
                  .replace(/'/g, "&#039;");
      }

   Then use it for the input_text.

   For the form submission:

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const text = textInput.value.trim();
        if (!text) return;

        // Disable the button to prevent multiple requests?
        const button = form.querySelector('button');
        button.disabled = true;

        try {
          const response = await fetch(apiUrl, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ texts: text })
          });

          const data = await response.json();

          if (data.code === "000") {
            // The response data is an array of arrays? Actually, the output is: data: [ [ {label, score}, ... ] ]
            // Since we sent one text, we get one array of 7 emotions in the first element of data.data.
            const emotions = data.data[0]; // array of 7 objects

            // Find the emotion with the highest score
            let maxEmotion = emotions[0];
            for (let i=1; i<emotions.length; i++) {
              if (emotions[i].score > maxEmotion.score) {
                maxEmotion = emotions[i];
              }
            }

            const emojiMap = {
              anger: 'üò†',
              disgust: 'ü§¢',
              fear: 'üò®',
              joy: 'üòÑ',
              neutral: 'üòê',
              sadness: 'üò¢',
              surprise: 'üò≤'
            };

            const historyItem = {
              input_text: text,
              predicted_emotion: maxEmotion.label,
              emotion_probabilities: emotions, // the array of all emotions with scores
              emotion_emoji: emojiMap[maxEmotion.label]
            };

            addToHistory(historyItem);
          } else {
            console.error('API error:', data.message);
            alert('Error: ' + data.message);
          }
        } catch (error) {
          console.error('Error:', error);
          alert('An error occurred. Please try again.');
        } finally {
          button.disabled = false;
        }
      });

   We'll also clear the textarea after successful prediction? Or leave it? We can leave it and let the user clear if they want.

   Now, let's write the HTML with Tailwind CSS.

   We'll include Tailwind via CDN for simplicity.

   Note: The requirement says to use Tailwind CSS.

   We'll design:

      - A header
      - A form with a textarea and a button
      - A history section

   We'll style the history items as cards.

   Let's code accordingly.
</think>
# Emotion Classification UI

I'll create a responsive, interactive UI for emotion classification that connects to the real API endpoint. The interface will allow users to input text, see predictions with probabilities, and visualize results with emojis.

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Emotion Classification</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        anger: '#ef4444',
                        disgust: '#22c55e',
                        fear: '#8b5cf6',
                        joy: '#f59e0b',
                        neutral: '#64748b',
                        sadness: '#3b82f6',
                        surprise: '#ec4899'
                    }
                }
            }
        }
    </script>
    <style>
        .emotion-bar {
            transition: width 0.5s ease-in-out;
        }
        .history-item {
            transition: all 0.3s ease;
        }
        .history-item:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        }
        .pulse {
            animation: pulse 2s infinite;
        }
        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }
    </style>
</head>
<body class="bg-gradient-to-br from-gray-50 to-gray-100 min-h-screen">
    <div class="container mx-auto px-4 py-8 max-w-6xl">
        <!-- Header -->
        <header class="text-center mb-12">
            <h1 class="text-4xl md:text-5xl font-bold text-gray-800 mb-3">Emotion Classification</h1>
            <p class="text-gray-600 max-w-2xl mx-auto">
                Analyze text to detect emotions: anger, disgust, fear, joy, neutral, sadness, or surprise.
                Powered by a state-of-the-art NLP model trained on diverse datasets.
            </p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <!-- Input Section -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <h2 class="text-2xl font-bold text-gray-800 mb-4">Analyze Text</h2>
                <form id="emotion-form">
                    <div class="mb-4">
                        <label for="text-input" class="block text-gray-700 font-medium mb-2">Enter your text:</label>
                        <textarea 
                            id="text-input" 
                            rows="5" 
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent" 
                            placeholder="Type or paste text here to analyze its emotional content..."
                            required></textarea>
                    </div>
                    <div class="flex justify-between items-center">
                        <button 
                            id="analyze-btn"
                            type="submit"
                            class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-lg transition duration-300 flex items-center">
                            <i class="fas fa-brain mr-2"></i> Analyze Emotion
                        </button>
                        <button 
                            type="button"
                            id="example-btn"
                            class="text-gray-600 hover:text-blue-600 font-medium">
                            <i class="fas fa-lightbulb mr-1"></i> Load Example
                        </button>
                    </div>
                </form>

                <!-- Result Section -->
                <div id="result-section" class="mt-8 hidden">
                    <h2 class="text-2xl font-bold text-gray-800 mb-4">Analysis Result</h2>
                    <div class="bg-gray-50 rounded-xl p-5">
                        <!-- Emoji Display -->
                        <div class="text-center mb-6">
                            <div id="result-emoji" class="text-7xl mb-2"></div>
                            <div id="result-emotion" class="text-2xl font-bold"></div>
                        </div>
                        
                        <!-- Emotion Probabilities -->
                        <div class="mb-6">
                            <h3 class="font-semibold text-gray-700 mb-3">Emotion Probabilities:</h3>
                            <div id="probability-bars" class="space-y-3"></div>
                        </div>
                        
                        <!-- Confidence Meter -->
                        <div class="mt-6">
                            <h3 class="font-semibold text-gray-700 mb-2">Confidence Level:</h3>
                            <div class="w-full bg-gray-200 rounded-full h-2.5">
                                <div id="confidence-bar" class="h-2.5 rounded-full bg-blue-600" style="width: 0%"></div>
                            </div>
                            <div id="confidence-value" class="text-right text-sm text-gray-600 mt-1">0%</div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- History Section -->
            <div class="bg-white rounded-xl shadow-lg p-6">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-2xl font-bold text-gray-800">Analysis History</h2>
                    <button id="clear-history" class="text-gray-500 hover:text-red-500">
                        <i class="fas fa-trash-alt mr-1"></i> Clear
                    </button>
                </div>
                
                <div id="history-container" class="space-y-4 max-h-[600px] overflow-y-auto pr-2">
                    <div class="text-center py-10 text-gray-400" id="empty-history-message">
                        <i class="fas fa-history text-4xl mb-3"></i>
                        <p>Your analyzed texts will appear here</p>
                    </div>
                    <!-- History items will be added here dynamically -->
                </div>
            </div>
        </div>

        <!-- Info Section -->
        <div class="mt-12 bg-white rounded-xl shadow-lg p-6">
            <h2 class="text-2xl font-bold text-gray-800 mb-4">About the Model</h2>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                    <h3 class="font-semibold text-gray-700 mb-2">Model Information</h3>
                    <ul class="space-y-2 text-gray-600">
                        <li class="flex"><i class="fas fa-cube mt-1 mr-2 text-blue-500"></i> <span><strong>Name:</strong> j-hartmann/emotion-english-distilroberta-base</span></li>
                        <li class="flex"><i class="fas fa-database mt-1 mr-2 text-blue-500"></i> <span><strong>Trained on:</strong> 6 diverse datasets with 58k curated comments</span></li>
                        <li class="flex"><i class="fas fa-project-diagram mt-1 mr-2 text-blue-500"></i> <span><strong>Emotions:</strong> Ekman's 6 basic emotions + neutral</span></li>
                        <li class="flex"><i class="fas fa-server mt-1 mr-2 text-blue-500"></i> <span><strong>API Endpoint:</strong> http://34.87.113.245:8000/api/text-classification</span></li>
                    </ul>
                </div>
                <div>
                    <h3 class="font-semibold text-gray-700 mb-2">Emotion Key</h3>
                    <div class="grid grid-cols-2 gap-3">
                        <div class="flex items-center"><div class="w-4 h-4 bg-anger rounded mr-2"></div> Anger</div>
                        <div class="flex items-center"><div class="w-4 h-4 bg-disgust rounded mr-2"></div> Disgust</div>
                        <div class="flex items-center"><div class="w-4 h-4 bg-fear rounded mr-2"></div> Fear</div>
                        <div class="flex items-center"><div class="w-4 h-4 bg-joy rounded mr-2"></div> Joy</div>
                        <div class="flex items-center"><div class="w-4 h-4 bg-neutral rounded mr-2"></div> Neutral</div>
                        <div class="flex items-center"><div class="w-4 h-4 bg-sadness rounded mr-2"></div> Sadness</div>
                        <div class="flex items-center"><div class="w-4 h-4 bg-surprise rounded mr-2"></div> Surprise</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Emotion configuration
        const EMOTIONS = {
            anger: { emoji: 'üò†', color: 'anger' },
            disgust: { emoji: 'ü§¢', color: 'disgust' },
            fear: { emoji: 'üò®', color: 'fear' },
            joy: { emoji: 'üòÑ', color: 'joy' },
            neutral: { emoji: 'üòê', color: 'neutral' },
            sadness: { emoji: 'üò¢', color: 'sadness' },
            surprise: { emoji: 'üò≤', color: 'surprise' }
        };

        // API configuration
        const API_URL = "http://34.87.113.245:8000/api/text-classification";
        
        // DOM elements
        const emotionForm = document.getElementById('emotion-form');
        const textInput = document.getElementById('text-input');
        const analyzeBtn = document.getElementById('analyze-btn');
        const exampleBtn = document.getElementById('example-btn');
        const resultSection = document.getElementById('result-section');
        const resultEmoji = document.getElementById('result-emoji');
        const resultEmotion = document.getElementById('result-emotion');
        const probabilityBars = document.getElementById('probability-bars');
        const confidenceBar = document.getElementById('confidence-bar');
        const confidenceValue = document.getElementById('confidence-value');
        const historyContainer = document.getElementById('history-container');
        const emptyHistoryMessage = document.getElementById('empty-history-message');
        const clearHistoryBtn = document.getElementById('clear-history');
        
        // Load history from localStorage
        let history = JSON.parse(localStorage.getItem('emotionHistory')) || [];
        
        // Initialize history display
        function renderHistory() {
            historyContainer.innerHTML = '';
            
            if (history.length === 0) {
                historyContainer.appendChild(emptyHistoryMessage);
                emptyHistoryMessage.classList.remove('hidden');
                return;
            }
            
            emptyHistoryMessage.classList.add('hidden');
            
            // Show latest first
            [...history].reverse().forEach((item, index) => {
                const historyItem = document.createElement('div');
                historyItem.className = 'history-item bg-gray-50 rounded-lg p-4 border border-gray-200';
                historyItem.innerHTML = `
                    <div class="flex justify-between items-start">
                        <div class="flex items-start">
                            <div class="text-3xl mr-3">${EMOTIONS[item.predictedEmotion].emoji}</div>
                            <div>
                                <div class="font-semibold text-${EMOTIONS[item.predictedEmotion].color}">${item.predictedEmotion.charAt(0).toUpperCase() + item.predictedEmotion.slice(1)}</div>
                                <div class="text-sm text-gray-500">${new Date(item.timestamp).toLocaleString()}</div>
                            </div>
                        </div>
                        <div class="text-xs font-semibold px-2 py-1 rounded bg-${EMOTIONS[item.predictedEmotion].color}/10 text-${EMOTIONS[item.predictedEmotion].color}">
                            ${Math.round(item.confidence * 100)}%
                        </div>
                    </div>
                    <div class="mt-3 text-gray-700 text-sm line-clamp-2">${item.text}</div>
                    <div class="mt-3 flex justify-end">
                        <button class="view-details text-blue-600 hover:text-blue-800 text-sm font-medium" data-index="${history.length - 1 - index}">
                            View Details <i class="fas fa-chevron-right ml-1 text-xs"></i>
                        </button>
                    </div>
                `;
                historyContainer.appendChild(historyItem);
            });
            
            // Add event listeners to view details buttons
            document.querySelectorAll('.view-details').forEach(button => {
                button.addEventListener('click', (e) => {
                    const index = parseInt(e.target.dataset.index);
                    showHistoryDetails(history[index]);
                });
            });
        }
        
        // Show detailed view of a history item
        function showHistoryDetails(item) {
            // Populate the input field
            textInput.value = item.text;
            
            // Show the result section
            resultSection.classList.remove('hidden');
            
            // Display the main result
            resultEmoji.textContent = EMOTIONS[item.predictedEmotion].emoji;
            resultEmotion.textContent = item.predictedEmotion.charAt(0).toUpperCase() + item.predictedEmotion.slice(1);
            resultEmotion.className = `text-2xl font-bold text-${EMOTIONS[item.predictedEmotion].color}`;
            
            // Display confidence
            const confidencePercent = Math.round(item.confidence * 100);
            confidenceBar.style.width = `${confidencePercent}%`;
            confidenceValue.textContent = `${confidencePercent}%`;
            
            // Display probability bars
            probabilityBars.innerHTML = '';
            item.probabilities.forEach(emotion => {
                const percent = Math.round(emotion.score * 100);
                const bar = document.createElement('div');
                bar.className = 'flex items-center';
                bar.innerHTML = `
                    <div class="w-24 text-sm text-gray-600">${emotion.label}</div>
                    <div class="flex-1 ml-2">
                        <div class="w-full bg-gray-200 rounded-full h-2.5">
                            <div class="emotion-bar h-2.5 rounded-full bg-${EMOTIONS[emotion.label].color}" style="width: ${percent}%"></div>
                        </div>
                    </div>
                    <div class="w-10 text-right text-sm text-gray-600">${percent}%</div>
                `;
                probabilityBars.appendChild(bar);
            });
            
            // Scroll to input section
            document.querySelector('.bg-white.rounded-xl').scrollIntoView({ behavior: 'smooth' });
        }
        
        // Analyze text using the API
        async function analyzeText(text) {
            try {
                // Show loading state
                analyzeBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i> Analyzing...';
                analyzeBtn.disabled = true;
                
                // Make request to the API
                const response = await fetch(API_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ texts: text })
                });
                
                const data = await response.json();
                
                if (data.code !== "000") {
                    throw new Error(data.message || 'API request failed');
                }
                
                // Process the response
                const emotions = data.data[0];
                const primaryEmotion = emotions.reduce((max, emotion) => 
                    emotion.score > max.score ? emotion : max, emotions[0]);
                
                // Create history item
                const historyItem = {
                    text: text,
                    predictedEmotion: primaryEmotion.label,
                    confidence: primaryEmotion.score,
                    probabilities: emotions,
                    timestamp: new Date().toISOString()
                };
                
                // Add to history and save
                history.push(historyItem);
                if (history.length > 20) history.shift(); // Keep only last 20 items
                localStorage.setItem('emotionHistory', JSON.stringify(history));
                
                // Update UI with results
                showHistoryDetails(historyItem);
                renderHistory();
                
            } catch (error) {
                console.error('Error:', error);
                alert(`Error: ${error.message}. Please try again.`);
            } finally {
                // Reset button
                analyzeBtn.innerHTML = '<i class="fas fa-brain mr-2"></i> Analyze Emotion';
                analyzeBtn.disabled = false;
            }
        }
        
        // Event Listeners
        emotionForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const text = textInput.value.trim();
            if (text) {
                analyzeText(text);
            }
        });
        
        exampleBtn.addEventListener('click', () => {
            const examples = [
                "I can't believe I failed the exam after studying so hard. This is so unfair!",
                "The sunset over the ocean was absolutely breathtaking today. I feel so grateful to witness such beauty.",
                "I just found out there might be layoffs at work next month. I don't know what I'll do if I lose my job.",
                "That movie was so disgusting! I can't believe they showed those graphic scenes without warning.",
                "You got me the concert tickets? Oh my god, this is the best surprise ever! I'm so excited!",
                "The quarterly report shows steady growth in all sectors. We're meeting our targets as projected."
            ];
            
            const randomExample = examples[Math.floor(Math.random() * examples.length)];
            textInput.value = randomExample;
        });
        
        clearHistoryBtn.addEventListener('click', () => {
            if (confirm('Are you sure you want to clear your analysis history?')) {
                history = [];
                localStorage.removeItem('emotionHistory');
                renderHistory();
            }
        });
        
        // Initialize
        renderHistory();
    </script>
</body>
</html>
```

## Key Features of the UI

1. **Modern, Responsive Design**:
   - Clean layout with gradient background and card-based components
   - Fully responsive for all device sizes
   - Color-coded emotions for visual recognition

2. **Interactive Input Section**:
   - Text area for entering passages
   - "Analyze Emotion" button with loading state
   - "Load Example" button for quick testing

3. **Detailed Results Display**:
   - Large emoji representing the primary emotion
   - Emotion label with color coding
   - Visual probability bars for all emotions
   - Confidence level indicator

4. **Analysis History**:
   - Stores previous analyses in local storage
   - Shows emotion emoji, text preview, and timestamp
   - "View Details" to revisit previous analyses
   - Option to clear history

5. **Model Information**:
   - Details about the NLP model and training data
   - Emotion key with colors and labels
   - API endpoint information

6. **Real API Integration**:
   - Connects to the specified API endpoint
   - Handles loading states and errors
   - Processes the JSON response to display results

The UI is designed to be intuitive, visually appealing, and fully functional with the emotion classification API. Users can easily analyze text, understand the results through visual indicators, and review their analysis history.